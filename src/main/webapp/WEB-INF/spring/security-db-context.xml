<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<http auto-config="true" use-expressions="true">
		<intercept-url pattern="/login/loginForm" access="permitAll" />
        <intercept-url pattern="/" access="permitAll" />
        <intercept-url pattern="/user/**" access="permitAll" />
        <intercept-url pattern="/admin/**" access="hasRole('ROLE_ADMIN')" />
        <intercept-url pattern="/**" access="hasAnyRole('ROLE_USER, ROLE_ADMIN')" />
		
		<!--  법칙이있다 적어주는 순서가있다. 논리적으로 제한이 좁은데서 큰쪽으로 가게 써준다. 하나씩 걸러낼 수 있도록. 반대로 작성하면 순환참조(?)가 일어날 수 있다.-->
		
 		<intercept-url pattern="/security/all" access="permitAll" />
 		<intercept-url pattern="/security/all" access="permitAll" />
		<intercept-url pattern="/security/member" access="hasRole('ROLE_MEMBER')" />
		<intercept-url pattern="/security/admin" access="hasRole('ROLE_ADMIN')" />  
					
						
<!-- 	login-page: 로그인 인증을 처리할 주소는 /security/login/loginForm이다.
		default-target-url: 로그인이 완료되면 
		username-parameter: 로그인 페이지 form에 있는 username을 저장한 변수이름 지정
		password-parameter: 로그인 페이지 form에 있는 password을 저장한 변수이름 지정 
		login-processing-url: 로그인 페이지 form action에 입력할 주소 지정
		authentication-failure-url : 로그인 실패인 경우 호출할 주소 지정 -->
		
		<!--로그인 페이지 커스텀 화   -->
      	<form-login login-page="/login/loginForm"
                    default-target-url="/"
                    authentication-failure-url="/login/loginForm?error"
                    username-parameter="id"
                    password-parameter="password" />
      
      <logout logout-url="/logout" logout-success-url="/" /> 
                    
		 <!-- 403 에러 처리 -->
		<access-denied-handler error-page="/login/accessDenied"/>
	</http>

	<beans:bean id="userDetailsService" class="org.springframework.security.core.userdetails.jdbc.JdbcDaoImpl">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	 <beans:bean id="customNoOpPasswordEncoder" class="edu.bit.ex.security.CustomNoOpPasswordEncoder"/>
	 <beans:bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	 
	<!-- provider -->
	<authentication-manager> <!-- 이건 내부에 있는 생기는 객체이다. -->
		<authentication-provider>
		<password-encoder ref="bcryptPasswordEncoder"/>
		<jdbc-user-service 
				data-source-ref="dataSource"
				role-prefix=""
			 	users-by-username-query="select username,password,enabled from users where username = ?"
				authorities-by-username-query="select username, authority from authorities where username = ?" /> 
		</authentication-provider>
	</authentication-manager>

</beans:beans>